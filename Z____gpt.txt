on va faire un ajout au code de btc-chart.js 


je veut ajouter une fonction qui tracera des lignes verticale sur le graphique du btc a chaque date de croisement de cbbi et fibo ,

toutes les date de croisment sont dans le fichiercbbi-crossings.json  



voici a quoi resemble le fichier cbbi-crossings.json 

[
  {
    "date": "2011-07-14",
    "cbbi": 61.79,
    "level": 61.97,
    "direction": "down"
  },

il nya pas tout je tes juste donnée un petit morceaux pour lexemple de formatage


donc exemple dans cbbi-crossings.json  il et dit que le 2011-07-14 il ya un croisment donc sur le graphique du btc on afichera une ligne verticale a la date du 2011-07-14 ,
 et ainsi de suite pour tout les autre croisment 


 il me faudrait aussi un bouton qui trace ou suprime ces ligne 


 voici le code de btc-chart.js : (tu gardera le fichier dans sont format dorigone avec les comentaire qui y sont mit )

 // --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//                                              1 : ( 1.1 , 1.2 , 1.3 , 1.4 , 1.5 , 1.6 )

// ===================================================================================================================================
//                                1.1 :
//                                Récupère un batch d’historique BTC (2000 jours max) via l’API CryptoCompare
// ===================================================================================================================================
//                                1.2 :
//                                Récupère l’historique complet de BTC depuis 2010 (en plusieurs batches)
// ===================================================================================================================================
//                                1.3 :
//                                Transforme les données de prix en échelle logarithmique (log10)
// ===================================================================================================================================
//                                1.4 :
//                                Met à jour l’échelle du graphique (arithmétique ou logarithmique) avec les données correspondantes
// ===================================================================================================================================
//                                1.5 :
//                                Initialise, configure et affiche le graphique BTC avec Lightweight Charts
// ===================================================================================================================================
//                                1.6 :
//                                INIT : Lancement initial du graphique BTC
// ===================================================================================================================================






// 1.1 :
// ===================================================================================================================================
//                                Récupère un batch d’historique BTC (2000 jours max) via l’API CryptoCompare


async function fetchCryptoCompareHistodayBatch(symbol = 'BTC', currency = 'USD', toTs = Math.floor(Date.now() / 1000), limit = 2000) {
	const url = `https://min-api.cryptocompare.com/data/v2/histoday?fsym=${symbol}&tsym=${currency}&limit=${limit}&toTs=${toTs}`;
	const res = await fetch(url);
	const json = await res.json();
	if (json.Response !== 'Success') throw new Error('Erreur API Cryptocompare: ' + json.Message);
	return json.Data.Data;
}



// 1.2 :
// ===================================================================================================================================
//                                Récupère l’historique complet de BTC depuis 2010 (en plusieurs batches)


async function fetchFullHistory() {
	let allData = [];
	let toTs = Math.floor(Date.now() / 1000);
	const oldestTimestamp = Math.floor(new Date('2010-01-01T00:00:00Z').getTime() / 1000);
	const limit = 2000;

	while (toTs > oldestTimestamp) {
		const batch = await fetchCryptoCompareHistodayBatch('BTC', 'USD', toTs, limit);
		if (batch.length === 0) break;

		allData = batch.concat(allData);
		toTs = batch[0].time - 1;
		if (batch[0].time <= oldestTimestamp) break;
	}
	return allData.filter(d => d.time >= oldestTimestamp);
}



// 1.3 :
// ===================================================================================================================================
//                                Transforme les données de prix en échelle logarithmique (log10)


function transformToLog(data) {
	const minPositive = 0.01;
	return data.map(d => {
		const val = d.value < minPositive ? minPositive : d.value;
		return {
			time: d.time,
			value: Math.log10(val),
			originalValue: d.value,
		};
	});
}



// 1.4 :
// ===================================================================================================================================
//                                Met à jour l’échelle du graphique (arithmétique ou logarithmique) avec les données correspondantes


function updateBTCChartData(lineSeries, chart, dataArith, dataLog, currentScale) {
	if (currentScale === 'arith') {
		lineSeries.setData(dataArith.map(d => ({ time: d.time, value: d.value })));
	} else {
		lineSeries.setData(dataLog.map(d => ({ time: d.time, value: d.value })));
	}
	chart.applyOptions({ rightPriceScale: { scaleMargins: { top: 0.2, bottom: 0.2 } } });

	const firstTime = Math.floor(new Date('2010-01-01T00:00:00Z').getTime() / 1000);
	const lastTime = Math.floor(Date.now() / 1000);
	chart.timeScale().setVisibleRange({ from: firstTime, to: lastTime });
}



// 1.5 :
// ===================================================================================================================================
//                                Initialise, configure et affiche le graphique BTC avec Lightweight Charts


async function drawBTCChart() {
	try {
		// ► Chargement de l'historique BTC complet
		const rawData = await fetchFullHistory();

		// ► Données échelle arithmétique
		const dataArith = rawData.map(d => ({
			time: d.time,
			value: d.close,
		}));

		// ► Données échelle logarithmique
		const dataLog = transformToLog(dataArith);

		// ► Création du graphique
		const chart = LightweightCharts.createChart(document.getElementById('chart'), {
			width: document.getElementById('chart').clientWidth,
			height: 500,
			layout: {
				backgroundColor: '#ffffff',
				textColor: '#000',
			},
			grid: {
				vertLines: { color: '#eee' },
				horzLines: { color: '#eee' },
			},
			crosshair: { mode: LightweightCharts.CrosshairMode.Normal },
			rightPriceScale: { borderColor: '#cccccc', visible: true },
			timeScale: {
				borderColor: '#cccccc',
				timeVisible: true,
				secondsVisible: false,
				rightOffset: 0,
				barSpacing: 2,
				minBarSpacing: 0,
				fixLeftEdge: false,
				handleScroll: { mouseWheel: true },
			},
		});

		// ► Stockage global pour accès externe
		window.chartInstance = chart;

		// ► Série principale (BTC)
		const lineSeries = chart.addLineSeries({
			color: '#ff9900',
			lineWidth: 2,
			priceFormat: {
				type: 'custom',
				formatter: price => currentScale === 'log' ? (Math.pow(10, price)).toFixed(2) : price.toFixed(2),
			},
		});

		// ► Échelle actuelle
		let currentScale = 'arith';

		// ► Affichage initial
		updateBTCChartData(lineSeries, chart, dataArith, dataLog, currentScale);

		// ► Gestion du sélecteur d’échelle
		document.getElementById('scaleSelector').addEventListener('change', e => {
			currentScale = e.target.value;
			updateBTCChartData(lineSeries, chart, dataArith, dataLog, currentScale);
		});

		// ► Redimensionnement dynamique
		window.addEventListener('resize', () => {
			chart.applyOptions({ width: document.getElementById('chart').clientWidth });
		});

	} catch (e) {
		alert(e.message);
		console.error(e);
	}
}



// 1.6 :
// ===================================================================================================================================
//                                INIT : Lancement initial du graphique BTC


drawBTCChart();




et voici dashboard.html:
<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="UTF-8" />
  <title>Graphique CBBI + Fibonacci + BTC avec échelle log/ar</title>
  <script src="https://unpkg.com/lightweight-charts@4.1.1/dist/lightweight-charts.standalone.production.js"></script>
  <style>
    body { 
      font-family: Arial, sans-serif; 
      margin: 20px; 
      background-color: #f0f2f5; 
      min-height: 150vh; /* pour forcer la page à être plus longue */
      display: flex;
      flex-direction: column;
    }

    #chart {
      width: 100%; 
      height: 500px; 
      margin-top: 20px;
      flex-shrink: 0;
      background: white;
      border: 1px solid #ccc;
    }

    label, input, button, select {
      margin: 5px; 
      font-size: 14px;
    }

    /* Grand espace vide uniquement après le graphique */
    #spacer {
      height: 500px; /* Ajuste selon besoin */
    }

    footer {
      background: #fff;
      padding: 15px 20px;
      border-radius: 6px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 20px;
      margin-top: 20px;
    }

    #colorControls {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      align-items: center;
      min-width: 250px;
      flex-grow: 1;
    }

    #colorControls label {
      display: flex;
      align-items: center;
      gap: 5px;
      font-size: 13px;
      user-select: none;
      min-width: 140px;
    }

    #colorControls input[type=color] {
      width: 40px;
      height: 24px;
      padding: 0;
      border: none;
      cursor: pointer;
    }

    #colorControls input[type=range] {
      width: 100px;
      cursor: pointer;
    }

    .opacity-label {
      min-width: 50px;
      font-size: 12px;
      color: #444;
      user-select: none;
    }

    #scaleControlWrapper {
      display: flex;
      align-items: center;
      gap: 8px;
      white-space: nowrap;
      min-width: 140px;
      user-select: none;
    }
  </style>
</head>
<body>

  <h2>Graphique CBBI + Fibonacci retracement + BTC avec échelle log/ar</h2>

  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
  <!--                                Contrôles valeurs points Fibonacci                                -->
  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
  <div>
    <label for="value1">Valeur Cbbi point 1 :</label>
    <input type="number" id="value1" step="0.01" value="100" />
    <label for="value2">Valeur Cbbi point 2 :</label>
    <input type="number" id="value2" step="0.01" value="0.45" />

    <button id="btnDrawFibo">Tracer Fibonacci</button>
    <button id="btnClearFibo">Supprimer Fibonacci</button>



    
  </div>

  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
  <!--                                    Conteneur principal du graphique                              -->
  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
  <div id="chart"></div>
  <div id="chartBTC" style="width: 100%; height: 500px;"></div>

 
  

  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
  <!--                                     Footer avec contrôles couleur et échelle                    -->
  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
  <footer>
    <div id="colorControls">
      <!-- Contrôles couleur / opacité (à remplir dans le JS) -->
    </div>
    <div id="scaleControlWrapper">
      <label for="scaleSelector">Échelle BTC :</label>
      <select id="scaleSelector">
        <option value="arith">Arithmétique</option>
        <option value="log">Logarithmique</option>
      </select>
    </div>
  </footer>

  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->
  <!--                                       Script principal (CBBI + Fibonacci + BTC)                   -->
  <!-- //////////////////////////////////////////////////////////////////////////////////////////////// -->

  <script src="cbbi/cbbi-analysis-export.js"></script>
  <script src="cbbi/cbbi-chart-fibo.js"></script>  
  <script src="cbbi/cbbi-controls.js"></script>

  <script src="cbbi/color-utils.js"></script>   
 

  <script src="btc-chart.js"></script>

  <script src="cbbi/cbbi-fibo-line.js"></script> 

 
  <script>
    // ================================================================================================
    // ========== FONCTION : Récupération d’un batch d’historique cryptomonnaie (CryptoCompare) =========
    // ================================================================================================
    async function fetchCryptoCompareHistodayBatch(symbol='BTC', currency='USD', toTs=Math.floor(Date.now()/1000), limit=2000) {
      const url = `https://min-api.cryptocompare.com/data/v2/histoday?fsym=${symbol}&tsym=${currency}&limit=${limit}&toTs=${toTs}`;
      const res = await fetch(url);
      const json = await res.json();
      if (json.Response !== 'Success') throw new Error('Erreur API Cryptocompare: ' + json.Message);
      return json.Data.Data;
    }

    // ================================================================================================
    // ========== FONCTION : Récupération complète de l’historique BTC depuis 2010 (plusieurs batches) ==
    // ================================================================================================
    async function fetchFullHistory() {
      let allData = [];
      let toTs = Math.floor(Date.now() / 1000);
      const oldestTimestamp = Math.floor(new Date('2010-01-01T00:00:00Z').getTime() / 1000);
      const limit = 2000;

      while (toTs > oldestTimestamp) {
        const batch = await fetchCryptoCompareHistodayBatch('BTC', 'USD', toTs, limit);
        if (batch.length === 0) break;

        allData = batch.concat(allData);
        toTs = batch[0].time - 1;

        if (batch[0].time <= oldestTimestamp) break;
      }
      return allData.filter(d => d.time >= oldestTimestamp);
    }

    // ================================================================================================
    // ========== FONCTION : Transformation des données pour échelle logarithmique ======================
    // ================================================================================================
    function transformToLog(data) {
      const minPositive = 0.01;
      return data.map(d => {
        const val = d.value < minPositive ? minPositive : d.value;
        return {
          time: d.time,
          value: Math.log10(val),
          originalValue: d.value,
        };
      });
    }

    // ================================================================================================
    // ========== FONCTION PRINCIPALE : Création et affichage du graphique BTC =========================
    // ================================================================================================
    async function drawBTCChart() {
      try {
        // Récupération complète des données BTC
        const rawData = await fetchFullHistory();

        // Préparation des données arithmétiques (prix brut)
        const dataArith = rawData.map(d => ({
          time: d.time,
          value: d.close,
        }));

        // Préparation des données transformées en logarithme
        const dataLog = transformToLog(dataArith);

        // Création du graphique avec Lightweight Charts
        const chart = LightweightCharts.createChart(document.getElementById('chart'), {
          width: document.getElementById('chart').clientWidth,
          height: 500,
          layout: {
            backgroundColor: '#ffffff',
            textColor: '#000',
          },
          grid: {
            vertLines: { color: '#eee' },
            horzLines: { color: '#eee' },
          },
          crosshair: {
            mode: LightweightCharts.CrosshairMode.Normal,
          },
          rightPriceScale: {
            borderColor: '#cccccc',
            visible: true,
          },
          timeScale: {
            borderColor: '#cccccc',
            timeVisible: true,
            secondsVisible: false,
            rightOffset: 0,
            barSpacing: 2,
            minBarSpacing: 0,
            fixLeftEdge: false,
            handleScroll: { mouseWheel: true },
          },
        });

        // Stockage global du graphique pour accès extérieur (debug, extensions)
        window.chartInstance = chart;

        // Création de la série de ligne BTC
        const lineSeries = chart.addLineSeries({
          color: '#ff9900',
          lineWidth: 2,
          priceFormat: {
            type: 'custom',
            formatter: price => {
              if (currentScale === 'log') {
                return (Math.pow(10, price)).toFixed(2);
              } else {
                return price.toFixed(2);
              }
            }
          }
        });

        // Échelle initiale : arithmétique
        let currentScale = 'arith';

        // Fonction pour mettre à jour les données affichées selon l’échelle sélectionnée
        function updateData() {
          if (currentScale === 'arith') {
            lineSeries.setData(dataArith.map(d => ({ time: d.time, value: d.value })));
            chart.applyOptions({ rightPriceScale: { scaleMargins: { top: 0.2, bottom: 0.2 } } });
          } else {
            lineSeries.setData(dataLog.map(d => ({ time: d.time, value: d.value })));
            chart.applyOptions({ rightPriceScale: { scaleMargins: { top: 0.2, bottom: 0.2 } } });
          }
          // Plage de temps visible (2010 - aujourd’hui)
          const firstTime = Math.floor(new Date('2010-01-01T00:00:00Z').getTime() / 1000);
          const lastTime = Math.floor(Date.now() / 1000);
          chart.timeScale().setVisibleRange({ from: firstTime, to: lastTime });
        }

        // Premier affichage des données
        updateData();

        // Gestion du changement d’échelle via le sélecteur
        document.getElementById('scaleSelector').addEventListener('change', e => {
          currentScale = e.target.value;
          updateData();
        });

        // Ajustement du graphique à la taille de la fenêtre
        window.addEventListener('resize', () => {
          chart.applyOptions({ width: document.getElementById('chart').clientWidth });
        });

      } catch (e) {
        alert(e.message);
        console.error(e);
      }
    }

    // Lancement initial du dessin du graphique BTC
    drawBTCChart();
  </script>

</body>
</html>
 